---
# Source: argo-cd/templates/argocd-application-controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-cd-domokai-argocd-application-controller
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argo-cd-domokai
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.0.3"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-application-controller
      app.kubernetes.io/instance: argo-cd-domokai
  revisionHistoryLimit: 5
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-application-controller
        app.kubernetes.io/instance: argo-cd-domokai
        app.kubernetes.io/component: application-controller
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.0.3"
    spec:
      containers:
      - command:
        - argocd-application-controller
        - --status-processors
        - "20"
        - --operation-processors
        - "10"
        - --app-resync
        - "180"
        - --self-heal-timeout-seconds
        - "5"
        - --repo-server
        - argo-cd-domokai-argocd-repo-server:8081
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argo-cd-domokai-argocd-redis:6379
        image: quay.io/argoproj/argocd:v2.0.3
        imagePullPolicy: IfNotPresent
        name: application-controller
        ports:
        - name: controller
          containerPort: 8082
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - mountPath: /app/config/controller/tls
          name: argocd-repo-server-tls
        resources:
          {}
      serviceAccountName: argocd-application-controller
      volumes:
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
---
# Source: argo-cd/templates/argocd-repo-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-cd-domokai-argocd-repo-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argo-cd-domokai
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.0.3"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/instance: argo-cd-domokai
  revisionHistoryLimit: 5
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-repo-server
        app.kubernetes.io/instance: argo-cd-domokai
        app.kubernetes.io/component: repo-server
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.0.3"
    spec:
      containers:
      - name: repo-server
        image: quay.io/argoproj/argocd:v2.0.3
        imagePullPolicy: IfNotPresent
        command:
        - uid_entrypoint.sh
        - argocd-repo-server
        - --redis
        - argo-cd-domokai-argocd-redis:6379
        - --logformat
        - text
        - --loglevel
        - info
        volumeMounts:
        - mountPath: /app/config/gpg/keys
          name: gpg-keyring
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/reposerver/tls
          name: argocd-repo-server-tls
        - mountPath: /tmp
          name: tmp-dir
        ports:
        - name: repo-server
          containerPort: 8081
          protocol: TCP

        livenessProbe:
          tcpSocket:
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          {}
      serviceAccountName: default
      volumes:
      - emptyDir: {}
        name: gpg-keyring
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - emptyDir: {}
        name: tmp-dir
---
# Source: argo-cd/templates/argocd-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-cd-domokai-argocd-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argo-cd-domokai
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.0.3"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/instance: argo-cd-domokai
  revisionHistoryLimit: 5
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-server
        app.kubernetes.io/instance: argo-cd-domokai
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.0.3"
    spec:
      containers:
      - name: server
        image: quay.io/argoproj/argocd:v2.0.3
        imagePullPolicy: IfNotPresent
        command:
        - argocd-server
        - --staticassets
        - /shared/app
        - --repo-server
        - argo-cd-domokai-argocd-repo-server:8081
        - --dex-server
        - http://argo-cd-domokai-argocd-dex-server:5556
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argo-cd-domokai-argocd-redis:6379
        volumeMounts:
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/server/tls
          name: argocd-repo-server-tls
        ports:
        - name: server
          containerPort: 8080
          protocol: TCP

        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          {}
      serviceAccountName: argocd-server
      volumes:
      - emptyDir: {}
        name: static-files
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
---
# Source: argo-cd/templates/dex/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-cd-domokai-argocd-dex-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/instance: argo-cd-domokai
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "v2.27.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-dex-server
      app.kubernetes.io/instance: argo-cd-domokai
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-dex-server
        app.kubernetes.io/instance: argo-cd-domokai
        app.kubernetes.io/component: dex-server
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "v2.27.0"
    spec:
      initContainers:
      - name: copyutil
        image: quay.io/argoproj/argocd:v2.0.3
        imagePullPolicy: IfNotPresent
        resources:
          {}
        command:
        - cp
        - -n
        - /usr/local/bin/argocd
        - /shared/argocd-dex
        volumeMounts:
        - mountPath: /shared
          name: static-files
      containers:
      - name: dex-server
        image: ghcr.io/dexidp/dex:v2.27.0
        imagePullPolicy: IfNotPresent
        command:
        - /shared/argocd-dex
        - rundex
        ports:
        - name: http
          containerPort: 5556
          protocol: TCP
        - name: grpc
          containerPort: 5557
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp
          name: tmp-dir
        - mountPath: /shared
          name: static-files
        resources:
          {}
      serviceAccountName: argocd-dex-server
      volumes:
      - emptyDir: {}
        name: tmp-dir
      - emptyDir: {}
        name: static-files
---
# Source: argo-cd/templates/redis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-cd-domokai-argocd-redis
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/instance: argo-cd-domokai
    app.kubernetes.io/component: redis
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: "6.2.2-alpine"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-redis
        app.kubernetes.io/instance: argo-cd-domokai
        app.kubernetes.io/component: redis
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: "6.2.2-alpine"
    spec:
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: argo-cd-domokai-argocd-redis
        args:
        - --save
        - ""
        - --appendonly
        - "no"
        image: redis:6.2.2-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
        resources:
          {}
